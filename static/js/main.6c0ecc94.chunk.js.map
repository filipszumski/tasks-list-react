{"version":3,"sources":["Header/index.js","Form/index.js","Tasks/index.js","Buttons/index.js","Section/index.js","Container/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","title","Form","addNewTask","useState","newTaskContent","setNewTaskContent","className","onSubmit","event","preventDefault","trim","placeholder","value","onChange","target","Tasks","tasks","hideDone","removeTask","toggleTaskDone","map","task","done","key","id","onClick","content","Buttons","toggleHideDone","setAllDone","length","disabled","every","Section","extraHeaderContent","body","Container","children","App","setHideDone","setTasks","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6c0ecc94.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Header = ({ title }) => (\r\n    <header>\r\n        <h1>{title}</h1>\r\n    </header>\r\n);\r\n\r\nexport default Header;","import React, { useState } from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Form = ({ addNewTask }) => {\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        addNewTask(newTaskContent.trim());\r\n        setNewTaskContent(\"\");\r\n    };\r\n\r\n    return (\r\n        <form\r\n            className=\"form\"\r\n            onSubmit={onFormSubmit}\r\n        >\r\n            <input\r\n                className=\"form__input\"\r\n                placeholder=\"Co jest do zrobienia?\"\r\n                value={newTaskContent}\r\n                onChange={(event) => setNewTaskContent(event.target.value)}\r\n            />\r\n            <button className=\"form__button\">Dodaj zadanie</button>\r\n        </form>\r\n    )\r\n};\r\n\r\nexport default Form;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Tasks = ({ tasks, hideDone, removeTask, toggleTaskDone }) => (\r\n    <ul className=\"tasks\">\r\n        {tasks.map((task) => (\r\n            <li\r\n                className={`tasks__listItem ${task.done && hideDone ? \"tasks__listItem--hidden\" : \"\"}`}\r\n                key={task.id}\r\n            >\r\n                <button\r\n                    className=\"tasks__button tasks__button--done\"\r\n                    onClick={() => toggleTaskDone(task.id)}\r\n                >\r\n                    {task.done ? \"✔\" : \"\"}\r\n                </button>\r\n                <span className={`${task.done ? \"tasks__listItemText--done\" : \"\"}`}>\r\n                    {task.content}\r\n                </span>\r\n                <button\r\n                    className=\"tasks__button tasks__button--remove\"\r\n                    onClick={() => removeTask(task.id)}\r\n                >\r\n                    {`✖`}\r\n                </button>\r\n            </li>\r\n        ))}\r\n    </ul >\r\n)\r\n\r\nexport default Tasks;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Buttons = ({ tasks, hideDone, toggleHideDone, setAllDone }) => (\r\n\r\n    <div className=\"buttons\">\r\n        {tasks.length > 0 && (\r\n            <>\r\n                <button\r\n                    className=\"buttons__button\"\r\n                    onClick={toggleHideDone}\r\n                >\r\n                    {hideDone ? \"Pokaż\" : \"Ukryj\"} ukończone\r\n                </button>\r\n                <button\r\n                    className=\"buttons__button\"\r\n                    disabled={tasks.every((task) => task.done)}\r\n                    onClick={setAllDone}\r\n                >\r\n                    Ukończ wszystkie\r\n                </button>\r\n            </>\r\n        )}\r\n    </div >\r\n\r\n);\r\n\r\nexport default Buttons;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Section = ({ title, extraHeaderContent, body }) => (\r\n\r\n    <section className=\"section\">\r\n        <header className=\"section__header\">\r\n            <h2 className=\"section__title\">{title}</h2>\r\n            {extraHeaderContent}\r\n        </header>\r\n        <div className=\"section__body\">\r\n            {body}\r\n        </div>\r\n    </section>\r\n);\r\n\r\nexport default Section;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Container = ({ children }) => (\r\n\r\n    <main className=\"container\">\r\n        {children}\r\n    </main>\r\n\r\n);\r\n\r\nexport default Container;","import React, { useState } from 'react';\nimport Header from \"./Header\";\nimport Form from \"./Form\";\nimport Tasks from \"./Tasks\";\nimport Buttons from \"./Buttons\";\nimport Section from \"./Section\";\nimport Container from \"./Container\";\n\nfunction App() {\n  const [hideDone, setHideDone] = useState(false);\n\n  const [tasks, setTasks] = useState([\n    { id: 1, content: \"przjeć na Reacta\", done: false },\n    { id: 2, content: \"zjeść obiad\", done: true },\n  ]);\n\n  const toggleHideDone = () => {\n    setHideDone(hideDone => !hideDone);\n  };\n\n  const removeTask = (id) => {\n    setTasks(tasks => tasks.filter(task => task.id !== id));\n  };\n\n  const toggleTaskDone = (id) => {\n    setTasks(tasks => tasks.map(task => {\n      if (task.id === id) {\n        return {\n          ...task,\n          done: !task.done,\n        };\n      }\n      return task;\n    }));\n  };\n\n  const setAllDone = () => {\n    setTasks(tasks => tasks.map(task => ({\n      ...task,\n      done: true,\n    })));\n  };\n\n  const addNewTask = (newTaskContent) => {\n    setTasks(tasks => [\n      ...tasks,\n      {\n        id: tasks.length ? tasks[tasks.length - 1].id + 1 : 1,\n        content: newTaskContent,\n        done: false,\n      }\n    ]);\n  }\n\n  return (\n    <Container>\n      <Header title=\"Lista zadań\" />\n      <Section\n        title=\"Dodaj nowe zadanie\"\n        body={<Form addNewTask={addNewTask} />}\n      />\n      <Section\n        title=\"Lista zadań\"\n        extraHeaderContent={\n          <Buttons\n            tasks={tasks}\n            hideDone={hideDone}\n            toggleHideDone={toggleHideDone}\n            setAllDone={setAllDone}\n          />\n        }\n        body={\n          <Tasks\n            tasks={tasks}\n            hideDone={hideDone}\n            removeTask={removeTask}\n            toggleTaskDone={toggleTaskDone}\n          />\n        }\n      />\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}