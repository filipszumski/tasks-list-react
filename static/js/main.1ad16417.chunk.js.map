{"version":3,"sources":["serviceWorker.js","features/theme/GlobalStyle.js","common/Header/styled.js","common/Header/index.js","features/dataFromLocaleStorage.js","features/tasks/tasksSlice.js","features/tasks/TasksPage/Form/styled.js","features/tasks/TasksPage/Input/index.js","features/tasks/TasksPage/Form/index.js","features/tasks/TasksPage/TasksList/styled.js","features/tasks/TasksPage/queryParameter.js","routes.js","features/tasks/TasksPage/TasksList/index.js","features/tasks/TasksPage/searchQueryParamName.js","features/tasks/TasksPage/Wrapper/index.js","features/tasks/TasksPage/Button/index.js","features/tasks/TasksPage/ListButtons/index.js","features/tasks/TasksPage/FormButtons/index.js","common/Section/styled.js","common/Section/index.js","common/Container/styled.js","common/Container/index.js","features/tasks/TasksPage/Search/styled.js","features/tasks/TasksPage/Search/index.js","features/tasks/TasksPage/index.js","features/author/index.js","features/tasks/TaskPage/index.js","common/Navigation/syled.js","features/theme/themeSlice.js","common/Navigation/index.js","features/theme/theme.js","App.js","features/tasks/getExampleTasks.js","features/tasks/tasksSaga.js","features/theme/themeSaga.js","features/rootSaga.js","store.js","index.js"],"names":["Boolean","window","location","hostname","match","GlobalStyle","createGlobalStyle","theme","fonts","primaryFont","colors","background","text","Wrapper","styled","header","Header","title","saveDataInLocaleStorage","data","storageKey","localStorage","setItem","JSON","stringify","getDataFromLocaleStorage","initialValue","parse","getItem","tasksSlice","createSlice","name","initialState","tasks","hideDone","loading","error","reducers","addNewTask","task","payload","push","setAllDone","done","toggleTaskDone","taskId","index","findIndex","id","removeTask","splice","toggleHideDone","state","some","fetchExampleTasks","fetchExampleTasksSuccess","exampleTasks","fetchExampleTasksError","actions","selectTasksState","selectTasks","selectLoading","selectError","selectHideDone","selectAreTasksEmpty","length","selectIsEveryTaskDone","every","StyledForm","form","breakpoints","mobile","Button","button","buttonInside","Input","input","frame","Form","useState","newTaskContent","setNewTaskContent","inputRef","useRef","dispatch","useDispatch","onSubmit","event","preventDefault","content","nanoid","current","focus","ref","placeholder","value","onChange","target","required","List","ul","Item","li","hidden","css","Content","span","ckeck","remove","StyledLink","Link","useQueryParameter","key","useLocation","URLSearchParams","search","get","toTask","TasksList","query","useSelector","trim","filter","toUpperCase","includes","selectTasksByQuery","map","onClick","to","div","disabled","ListButtons","areTasksEmpty","isEveryTaskDone","FormButtons","loadingState","errorState","section","sectionBackground","Title","h2","Body","Section","extraHeaderContent","body","main","Container","children","Search","replaceQueryParameter","history","useHistory","searchParams","undefined","delete","set","newSearch","toString","pathname","useReplaceQueryParameter","TasksPage","AuthorPage","TaskPage","params","useParams","find","getTaskById","StyledNav","nav","StyledList","StyledItem","StyledNavLink","NavLink","attrs","activeClassName","themeSlice","toggleTheme","selectTheme","selecThemeState","basicTheme","darkTheme","App","basename","Navigation","path","getExampleTasks","a","axios","response","fetchExampleTasksHandler","saveTasksInLocaleStorageHandler","tasksSaga","delay","call","put","console","select","takeLatest","type","takeEvery","saveThemeInLocaleStorageHandler","themeSaga","rootSaga","all","sagaMiddleware","createSagaMiddleware","configureStore","reducer","tasksReducer","themeReducer","middleware","run","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.1ad16417.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html {\r\n    box-sizing: border-box;\r\n    };\r\n\r\n    *, ::after, ::before {\r\n    box-sizing: inherit;\r\n    };\r\n\r\n    body {\r\n    font-family: ${({ theme }) => theme.fonts.primaryFont};\r\n    background-color: ${({ theme }) => theme.colors.background};\r\n    color: ${({ theme }) => theme.colors.text};\r\n    };\r\n`;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.header`\r\n    display: grid;\r\n    grid-template-columns: 1fr auto;\r\n`;\r\n","import React from \"react\";\r\nimport { Wrapper } from \"./styled\";\r\n\r\nconst Header = ({ title }) => (\r\n    <Wrapper>\r\n        <h1>{title}</h1>\r\n    </Wrapper>\r\n);\r\n\r\nexport default Header;","export const saveDataInLocaleStorage = (data, storageKey) => {\r\n    localStorage.setItem(storageKey, JSON.stringify(data));\r\n};\r\n\r\nexport const getDataFromLocaleStorage = (storageKey, initialValue) => JSON.parse(localStorage.getItem(storageKey)) || initialValue;","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { getDataFromLocaleStorage } from \"../dataFromLocaleStorage\";\r\n\r\nconst tasksSlice = createSlice({\r\n    name: \"tasks\",\r\n    initialState: {\r\n        tasks: getDataFromLocaleStorage(\"tasks\", []),\r\n        hideDone: false,\r\n        loading: false,\r\n        error: false,\r\n    },\r\n    reducers: {\r\n        addNewTask: ({ tasks }, { payload: task }) => {\r\n            tasks.push(task);\r\n        },\r\n        setAllDone: ({ tasks }) => {\r\n            for (const task of tasks) {\r\n                task.done = true;\r\n            };\r\n        },\r\n        toggleTaskDone: ({ tasks }, { payload: taskId }) => {\r\n            const index = tasks.findIndex(task => task.id === taskId);\r\n\r\n            tasks[index].done = !tasks[index].done;\r\n        },\r\n        removeTask: ({ tasks }, { payload: taskId }) => {\r\n            const index = tasks.findIndex(task => task.id === taskId);\r\n\r\n            tasks.splice(index, 1);\r\n        },\r\n        toggleHideDone: (state) => {\r\n            const isAnyTaskDone = state.tasks.some(task => task.done);\r\n\r\n            if (isAnyTaskDone) {\r\n                state.hideDone = !state.hideDone;\r\n            }\r\n        },\r\n        fetchExampleTasks: (state) => {\r\n            state.loading = true;\r\n        },\r\n        fetchExampleTasksSuccess: (state, { payload: exampleTasks }) => {\r\n            state.tasks = exampleTasks;\r\n            state.loading = false;\r\n        },\r\n        fetchExampleTasksError: (state) => {\r\n            state.loading = false;\r\n            state.error = true;\r\n        }\r\n    }\r\n});\r\n\r\nexport const {\r\n    addNewTask,\r\n    setAllDone,\r\n    toggleTaskDone,\r\n    removeTask,\r\n    toggleHideDone,\r\n    fetchExampleTasks,\r\n    fetchExampleTasksSuccess,\r\n    fetchExampleTasksError,\r\n} = tasksSlice.actions;\r\n\r\nconst selectTasksState = state => state.tasks;\r\n\r\nexport const selectTasks = state => selectTasksState(state).tasks;\r\nexport const selectLoading = state => selectTasksState(state).loading;\r\nexport const selectError = state => selectTasksState(state).error;\r\nexport const selectHideDone = state => selectTasksState(state).hideDone;\r\nexport const selectAreTasksEmpty = state => selectTasks(state).length === 0;\r\nexport const selectIsEveryTaskDone = state => selectTasks(state).every(task => task.done);\r\nexport const getTaskById = (state, id) => selectTasks(state).find(task => task.id === id);\r\nexport const selectTasksByQuery = (state, query) => {\r\n    const tasks = selectTasks(state);\r\n\r\n    if (!query || query.trim() === \"\") {\r\n        return tasks;\r\n    } return tasks.filter(task => task.content.toUpperCase().includes(query.toUpperCase()));\r\n};\r\n\r\nexport default tasksSlice.reducer;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledForm = styled.form`\r\n    display: grid;\r\n    grid-template-columns: 1fr auto;\r\n    grid-gap: 10px;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoints.mobile}px) {\r\n        grid-template-columns: 1fr;\r\n    }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    padding: 10px;\r\n    background-color: ${({ theme }) => theme.colors.button};\r\n    color: ${({ theme }) => theme.colors.buttonInside};\r\n    border: none;\r\n    border-radius: 5px;\r\n    transition: filter 0.5s, transform 0.5s;\r\n\r\n    &:hover {\r\n        filter: brightness(115%);\r\n        transform: scale(1.05);\r\n    }\r\n    &:active {\r\n        filter: brightness(130%);\r\n        transform: scale(1.05);\r\n    }\r\n`;","import styled from \"styled-components\";\r\n\r\nexport const Input = styled.input`\r\n    padding: 10px;\r\n    border: 1px solid ${({ theme }) => theme.colors.frame};\r\n    border-radius: 5px;\r\n    background-color: ${({ theme }) => theme.colors.background};\r\n    color: ${({ theme }) => theme.colors.text};\r\n`;","import React, { useRef, useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { nanoid } from \"@reduxjs/toolkit\";\r\nimport { addNewTask } from \"../../tasksSlice\";\r\nimport { StyledForm, Button } from \"./styled\";\r\nimport { Input } from \"../Input\";\r\n\r\nconst Form = () => {\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n    const inputRef = useRef(null);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        dispatch(addNewTask({\r\n            content: newTaskContent,\r\n            id: nanoid(),\r\n            done: false,\r\n        }));\r\n\r\n        setNewTaskContent(\"\");\r\n        inputRef.current.focus();\r\n    };\r\n\r\n    return (\r\n        <StyledForm\r\n            onSubmit={onFormSubmit}\r\n        >\r\n            <Input\r\n                ref={inputRef}\r\n                placeholder=\"Co jest do zrobienia?\"\r\n                value={newTaskContent}\r\n                onChange={(event) => setNewTaskContent(event.target.value)}\r\n                required\r\n            />\r\n            <Button>Dodaj zadanie</Button>\r\n        </StyledForm>\r\n    )\r\n};\r\n\r\nexport default Form;","import { Link } from \"react-router-dom\";\r\nimport styled, { css } from \"styled-components\";\r\n\r\nexport const List = styled.ul`\r\n    list-style-type: none;\r\n    padding: 0px;\r\n    margin: 0px;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n    padding: 10px;\r\n    display: grid;\r\n    grid-template-columns: auto 1fr auto;\r\n    grid-gap: 10px;\r\n    align-items: center;\r\n    border-bottom: 2px solid ${({ theme }) => theme.colors.background};\r\n  \r\n    ${({ hidden }) => hidden && css`\r\n        display: none;\r\n    `}\r\n`;\r\n\r\nexport const Content = styled.span`\r\n    overflow-wrap: anywhere;\r\n\r\n    ${({ done }) => done && css`\r\n        overflow-wrap: anywhere;\r\n        text-decoration: line-through;\r\n    `}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    border: none;\r\n    color: ${({ theme }) => theme.colors.buttonInside};\r\n    width: 30px;\r\n    height: 30px;\r\n\r\n    ${({ done }) => done && css`\r\n        background-color: ${({ theme }) => theme.colors.ckeck};\r\n        transition: filter 0.5s;\r\n\r\n    &:hover {\r\n        filter: brightness(115%);\r\n    }\r\n    &:active {\r\n        filter: brightness(130%);\r\n    }\r\n    `}\r\n\r\n    ${({ remove }) => remove && css`\r\n        background-color: ${({ theme }) => theme.colors.remove};\r\n        transition: filter 0.5s;\r\n\r\n    &:hover {\r\n        filter: brightness(115%);\r\n    }\r\n    &:active {\r\n        filter: brightness(130%);\r\n    }\r\n    `}\r\n`;\r\n\r\nexport const StyledLink = styled(Link)`\r\n    text-decoration: none;\r\n    color: ${({ theme }) => theme.colors.button};\r\n\r\n    &:hover {\r\n        border-bottom: 1px solid;\r\n    }\r\n`;","import { useLocation, useHistory } from \"react-router-dom\";\r\n\r\nexport const useQueryParameter = (key) => {\r\n    const location = useLocation();\r\n    const searchParams = new URLSearchParams(location.search);\r\n\r\n    return searchParams.get(key);\r\n};\r\n\r\nexport const useReplaceQueryParameter = () => {\r\n    const history = useHistory();\r\n    const location = useLocation();\r\n\r\n    return ({ key, value }) => {\r\n        const searchParams = new URLSearchParams(location.search);\r\n\r\n        if (value === undefined) {\r\n            searchParams.delete(key);\r\n        } else {\r\n            searchParams.set(key, value)\r\n        }\r\n\r\n        const newSearch = searchParams.toString()\r\n        history.push(`${location.pathname}?${newSearch}`)\r\n    };\r\n};\r\n\r\n","export const toTasks = () => \"/zadania\";\r\nexport const toAuthor = () => \"/autor\";\r\nexport const toTask = (id = \":id\") => `/zadania/${id}`;","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { removeTask, selectHideDone, toggleTaskDone, selectTasksByQuery } from \"../../tasksSlice\";\r\nimport { List, Item, Content, Button, StyledLink } from \"./styled\";\r\nimport { useQueryParameter } from \"../queryParameter\";\r\nimport searchQueryParamName from \"../searchQueryParamName\";\r\nimport { toTask } from \"../../../../routes\";\r\n\r\nconst TasksList = () => {\r\n    const query = useQueryParameter(searchQueryParamName);\r\n    const tasks = useSelector((state) => selectTasksByQuery(state, query));\r\n    const hideDone = useSelector(selectHideDone);\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <List>\r\n            {tasks.map((task) => (\r\n                <Item\r\n                    hidden={task.done && hideDone}\r\n                    key={task.id}\r\n                >\r\n                    <Button\r\n                        done\r\n                        onClick={() => dispatch(toggleTaskDone(task.id))}\r\n                    >\r\n                        {task.done ? \"✔\" : \"\"}\r\n                    </Button>\r\n                    <Content done={task.done}>\r\n                        <StyledLink to={toTask(task.id)}>{task.content}</StyledLink>\r\n                    </Content>\r\n                    <Button\r\n                        remove\r\n                        onClick={() => dispatch(removeTask(task.id))}\r\n                    >\r\n                        {`✖`}\r\n                    </Button>\r\n                </Item>\r\n            ))}\r\n        </List>\r\n    )\r\n};\r\n\r\nexport default TasksList;","export default \"szukaj\";","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoints.mobile}px) {\r\n        flex-basis: 100%;\r\n    }\r\n`;","import styled, { css } from \"styled-components\";\r\n\r\nexport const Button = styled.button`\r\n    margin-left: 10px;\r\n    background: transparent;\r\n    border: none;\r\n    color: ${({ theme }) => theme.colors.button};\r\n    transition: filter 0.3s;\r\n\r\n    ${({ error }) => error && css`\r\n        color: crimson;\r\n    `};\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoints.mobile}px) {\r\n        flex-basis: 100%;\r\n        margin: 20px 0px 0px 0px;\r\n    }\r\n\r\n    &:hover {\r\n        filter: brightness(115%);\r\n    }\r\n    &:active {\r\n        filter: brightness(130%);\r\n    }\r\n    &:disabled {\r\n        color: ${({ theme }) => theme.colors.disabled};\r\n    }\r\n`;","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n    selectHideDone,\r\n    selectAreTasksEmpty,\r\n    selectIsEveryTaskDone,\r\n    toggleHideDone,\r\n    setAllDone\r\n} from \"../../tasksSlice\";\r\nimport { Wrapper } from \"../Wrapper\";\r\nimport { Button } from \"../Button\";\r\n\r\nconst ListButtons = () => {\r\n    const dispatch = useDispatch();\r\n    const hideDone = useSelector(selectHideDone);\r\n    const areTasksEmpty = useSelector(selectAreTasksEmpty);\r\n    const isEveryTaskDone = useSelector(selectIsEveryTaskDone);\r\n\r\n    return (\r\n        <Wrapper>\r\n            {areTasksEmpty || (\r\n                <>\r\n                    <Button\r\n                        onClick={() => dispatch(toggleHideDone())}\r\n                    >\r\n                        {hideDone ? \"Pokaż\" : \"Ukryj\"} ukończone\r\n                    </Button>\r\n                    <Button\r\n                        disabled={isEveryTaskDone}\r\n                        onClick={() => dispatch(setAllDone())}\r\n                    >\r\n                        Ukończ wszystkie\r\n                    </Button>\r\n                </>\r\n            )}\r\n        </Wrapper >\r\n    )\r\n};\r\n\r\nexport default ListButtons;","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { fetchExampleTasks } from \"../../tasksSlice\";\r\nimport { Wrapper } from \"../Wrapper\";\r\nimport { Button } from \"../Button\";\r\nimport { selectLoading, selectError } from \"../../tasksSlice\";\r\n\r\nconst FormButtons = () => {\r\n    const dispatch = useDispatch();\r\n    const loadingState = useSelector(selectLoading);\r\n    const errorState = useSelector(selectError);\r\n\r\n    return (\r\n        <Wrapper >\r\n            {loadingState === false ?\r\n                <>\r\n                    <Button onClick={() => dispatch(fetchExampleTasks())} error={errorState}>\r\n                        {errorState === true ?\r\n                            <>Wystąpił błąd, spróbuj ponownie</> :\r\n                            <>Pobierz przykładowe zadania</>}\r\n                    </Button>\r\n                </> :\r\n                loadingState === true && (\r\n                    <>\r\n                        <Button disabled >\r\n                            <>Ładowanie...</>\r\n                        </Button>\r\n                    </>\r\n                )}\r\n\r\n        </Wrapper >\r\n\r\n    )\r\n};\r\n\r\nexport default FormButtons;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.section`\r\n    background-color: ${({ theme }) => theme.colors.sectionBackground};\r\n    margin: 10px 0px;\r\n`;\r\n\r\nexport const Header = styled.header`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    flex-wrap: wrap;\r\n    padding: 20px;\r\n    border-bottom: 3px solid ${({ theme }) => theme.colors.background};\r\n`;\r\n\r\nexport const Title = styled.h2`\r\n    margin: 0px;\r\n    font-size: 20px;\r\n`;\r\n\r\nexport const Body = styled.div`\r\n    padding: 20px;\r\n`;","import React from \"react\";\r\nimport { Wrapper, Header, Title, Body } from \"./styled\";\r\n\r\nconst Section = ({ title, extraHeaderContent, body }) => (\r\n    <Wrapper>\r\n        <Header>\r\n            <Title>\r\n                {title}\r\n            </Title>\r\n            {extraHeaderContent}\r\n        </Header>\r\n        <Body>\r\n            {body}\r\n        </Body>\r\n    </Wrapper>\r\n);\r\n\r\nexport default Section;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.main`\r\n    max-width: 900px;\r\n    padding: 20px;\r\n    margin: 0 auto;\r\n`;","import React from \"react\";\r\nimport { Wrapper } from \"./styled\";\r\n\r\nconst Container = ({ children }) => (\r\n    <Wrapper>\r\n        {children}\r\n    </Wrapper>\r\n);\r\n\r\nexport default Container;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    display: grid;\r\n    grid-template-columns: 1fr;\r\n`;\r\n","import React from \"react\";\r\nimport { Wrapper } from \"./styled\";\r\nimport { Input } from \"../Input\";\r\nimport searchQueryParamName from \"../searchQueryParamName\";\r\nimport { useQueryParameter, useReplaceQueryParameter } from \"../queryParameter\";\r\n\r\nconst Search = () => {\r\n    const query = useQueryParameter(searchQueryParamName);\r\n    const replaceQueryParameter = useReplaceQueryParameter();\r\n\r\n    const OnInputChange = (event) => {\r\n        replaceQueryParameter({\r\n            key: searchQueryParamName,\r\n            value: event.target.value.trim() !== \"\" ? event.target.value : undefined,\r\n        })\r\n    };\r\n\r\n    return (\r\n        <Wrapper>\r\n            <Input\r\n                placeholder=\"Filtruj zadania\"\r\n                value={query || \"\"}\r\n                onChange={OnInputChange}\r\n            />\r\n        </Wrapper>\r\n    )\r\n};\r\n\r\nexport default Search;","import React from 'react';\r\nimport Header from \"../../../common/Header\";\r\nimport Form from \"./Form\";\r\nimport TasksList from \"./TasksList\";\r\nimport ListButtons from \"./ListButtons\";\r\nimport FormButtons from \"./FormButtons\";\r\nimport Section from \"../../../common/Section\";\r\nimport Container from \"../../../common/Container\";\r\nimport Search from \"./Search\";\r\n\r\nfunction TasksPage() {\r\n\r\n  return (\r\n    <Container>\r\n      <Header\r\n        title=\"Lista zadań\"\r\n      />\r\n      <Section\r\n        title=\"Dodaj nowe zadanie\"\r\n        extraHeaderContent={<FormButtons />}\r\n        body={<Form />}\r\n      />\r\n      <Section\r\n        title=\"Wyszukiwarka\"\r\n        body={<Search />}\r\n      />\r\n      <Section\r\n        title=\"Lista zadań\"\r\n        extraHeaderContent={<ListButtons />}\r\n        body={<TasksList />}\r\n      />\r\n    </Container>\r\n  )\r\n};\r\n\r\nexport default TasksPage;\r\n","import React from 'react';\r\nimport Header from \"../../common/Header\";\r\nimport Section from \"../../common/Section\";\r\nimport Container from \"../../common/Container\";\r\n\r\nfunction AuthorPage() {\r\n  return (\r\n    <Container>\r\n      <Header\r\n        title=\"O autorze\"\r\n      />\r\n      <Section\r\n        title=\"Filip Szumski\"\r\n        body={\r\n          <>\r\n            Lorem ipsum dolor sit amet consectetur adipisicing elit. Saepe officia dolorum, laboriosam unde maiores ipsum quod atque quis eos vel enim totam consectetur autem. Maxime molestiae libero accusamus eligendi quidem! Lorem ipsum dolor sit amet consectetur adipisicing elit. Est iure maxime vel, itaque officiis id autem vero ea sint quis quidem assumenda nulla eos inventore? In totam ipsum ab ut! Lorem ipsum dolor sit amet consectetur adipisicing elit. Distinctio culpa doloremque autem asperiores ipsam? Porro eos quas quibusdam aut, voluptas eveniet praesentium ullam ipsam quisquam sapiente reiciendis cupiditate, hic suscipit.\r\n          </>\r\n        }\r\n      />\r\n    </Container>\r\n  )\r\n};\r\n\r\nexport default AuthorPage;","import React from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\nimport Header from \"../../../common/Header\";\r\nimport Section from \"../../../common/Section\";\r\nimport Container from \"../../../common/Container\";\r\nimport { getTaskById } from \"../tasksSlice\";\r\n\r\nfunction TaskPage() {\r\n    const params = useParams();\r\n    const task = useSelector((state) => getTaskById(state, params.id));\r\n\r\n    return (\r\n        <Container>\r\n            <Header\r\n                title=\"Szczegóły zadania\"\r\n            />\r\n            <Section\r\n                title={task ? task.content : \"Nie znaleziono zadania\"}\r\n                body={!!task && (\r\n                    <>\r\n                        <strong>Ukończono</strong>: {task.done ? \"Tak\" : \"Nie\"}\r\n                    </>\r\n                )}\r\n            />\r\n        </Container>\r\n    )\r\n};\r\n\r\nexport default TaskPage;","import { NavLink } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\n\r\nexport const StyledNav = styled.nav`\r\n    display: grid;\r\n    grid-template-columns: auto 1fr;\r\n    grid-gap: 12px;\r\n    background-color: ${({ theme }) => theme.colors.button};\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    align-self: center;\r\n    padding: 8px;\r\n    margin-left: 12px;\r\n    border-radius: 5px;\r\n    border: none;\r\n    background: ${({ theme }) => theme.colors.sectionBackground};\r\n    color: ${({ theme }) => theme.colors.button};\r\n\r\n    &:hover {\r\n        filter: brightness(110%);\r\n    }\r\n    &:active {\r\n        filter: brightness(120%);\r\n    }\r\n`;\r\n\r\nexport const StyledList = styled.ul`\r\npadding-left: 0px;\r\nmargin: 0;\r\nlist-style: none;\r\ndisplay: flex;\r\njustify-content: center;\r\n`;\r\n\r\nexport const StyledItem = styled.li`\r\npadding: 20px 10px 20px 10px;\r\n`;\r\n\r\nexport const StyledNavLink = styled(NavLink).attrs(() => ({\r\n    activeClassName: \"active\"\r\n}))`\r\ncolor: ${({ theme }) => theme.colors.buttonInside};\r\ntext-decoration: none;\r\n&.active {\r\n    font-weight: bold;\r\n};\r\n&:hover {\r\n    border-bottom: 1px solid;\r\n}\r\n`;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { getDataFromLocaleStorage } from \"../dataFromLocaleStorage\";\r\n\r\nconst themeSlice = createSlice({\r\n    name: \"theme\",\r\n    initialState: {\r\n        theme: getDataFromLocaleStorage(\"theme\", \"jasny\"),\r\n    },\r\n    reducers: {\r\n        toggleTheme: (state) => {\r\n            state.theme = (state.theme === \"jasny\") ? \"ciemny\" :\"jasny\";\r\n        },\r\n    },\r\n});\r\n\r\nexport const {\r\n    toggleTheme,\r\n} = themeSlice.actions;\r\n\r\nexport const selecThemeState = state => state.theme;\r\nexport const selectTheme = state => selecThemeState(state).theme;\r\n\r\nexport default themeSlice.reducer;","import React from \"react\";\r\nimport { toTasks, toAuthor } from \"../../routes\";\r\nimport {\r\n    StyledNav,\r\n    StyledList,\r\n    StyledItem,\r\n    StyledNavLink,\r\n    Button\r\n} from \"./syled\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { toggleTheme } from \"../../features/theme/themeSlice\";\r\n\r\nexport default () => {\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <StyledNav>\r\n            <Button onClick={() => dispatch(toggleTheme())}>Zmień tło</Button>\r\n            <StyledList>\r\n                <StyledItem>\r\n                    <StyledNavLink to={toTasks()}>Lista zadań</StyledNavLink>\r\n                </StyledItem>\r\n                <StyledItem>\r\n                    <StyledNavLink to={toAuthor()}>O autorze</StyledNavLink>\r\n                </StyledItem>\r\n            </StyledList>\r\n        </StyledNav>\r\n    )\r\n};\r\n\r\n","export const basicTheme = {\r\n    colors: {\r\n        background: \"#eee\",\r\n        sectionBackground: \"white\",\r\n        button: \"hsl(221, 79%, 55%)\",\r\n        disabled: \"gray\",\r\n        frame: \"#C9C9C9\",\r\n        text: \"black\",\r\n        ckeck: \"green\",\r\n        buttonInside: \"white\",\r\n        remove: \"#E81111\",\r\n        error: \"crimson\",\r\n    },\r\n    breakpoints: {\r\n        mobile: 540,\r\n    },\r\n    fonts: {\r\n        primaryFont: \"'Montserrat', sans-serif\",\r\n    },\r\n};\r\n\r\nexport const darkTheme = {\r\n    ...basicTheme,\r\n\r\n    colors: {\r\n        background: \"#23232A\",\r\n        sectionBackground: \"#333342\",\r\n        button: \"#10A278\",\r\n        disabled: \"black\",\r\n        frame: \"#333342\",\r\n        text: \"white\",\r\n        ckeck: \"green\",\r\n        buttonInside: \"white\",\r\n        remove: \"#E81111\",\r\n        error: \"crimson\",\r\n    },\r\n};\r\n","import React from \"react\";\r\nimport { BrowserRouter, Switch, Route, Redirect } from \"react-router-dom\";\r\nimport { ThemeProvider } from \"styled-components\";\r\nimport { GlobalStyle } from \"./features/theme/GlobalStyle\";\r\nimport TasksPage from \"./features/tasks/TasksPage\";\r\nimport AuthorPage from \"./features/author\";\r\nimport TaskPage from \"./features/tasks/TaskPage\";\r\nimport Navigation from \"./common/Navigation\";\r\nimport { toTask, toAuthor, toTasks } from \"./routes\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectTheme } from \"./features/theme/themeSlice\";\r\nimport { basicTheme, darkTheme } from \"./features/theme/theme\";\r\n\r\nconst App = () => {\r\n    const theme = useSelector(selectTheme);\r\n\r\n    return (\r\n        <ThemeProvider theme={theme === \"jasny\" ? basicTheme : darkTheme}>\r\n            <GlobalStyle />\r\n            <BrowserRouter basename=\"/tasks-list-react\">\r\n                <Navigation />\r\n                <Switch>\r\n                    <Route path={toTask()}>\r\n                        <TaskPage />\r\n                    </Route>\r\n                    <Route path={toTasks()}>\r\n                        <TasksPage />\r\n                    </Route>\r\n                    <Route path={toAuthor()}>\r\n                        <AuthorPage />\r\n                    </Route>\r\n                    <Route>\r\n                        <Redirect to={toTasks()} />\r\n                    </Route>\r\n                </Switch>\r\n            </BrowserRouter>\r\n        </ThemeProvider>\r\n    )\r\n};\r\n\r\nexport default App;","import axios from \"axios\";\r\n\r\nexport const getExampleTasks = async () => {\r\n    const response = await axios.get(\"/tasks-list-react/exampleTasks.json\");\r\n\r\n    return await response.data;\r\n};\r\n\r\n","import { takeLatest, put, call, takeEvery, select, delay } from \"redux-saga/effects\";\r\nimport { getExampleTasks } from \"./getExampleTasks\";\r\nimport { saveDataInLocaleStorage } from \"../dataFromLocaleStorage\";\r\nimport {\r\n    fetchExampleTasks,\r\n    selectTasks,\r\n    fetchExampleTasksSuccess,\r\n    fetchExampleTasksError\r\n} from \"./tasksSlice\";\r\n\r\nfunction* fetchExampleTasksHandler() {\r\n    try {\r\n        yield delay(1000);\r\n        const exampleTasks = yield call(getExampleTasks);\r\n        yield put(fetchExampleTasksSuccess(exampleTasks));\r\n    } catch (error) {\r\n        yield put(fetchExampleTasksError());\r\n        console.error(error);\r\n    }\r\n};\r\n\r\nfunction* saveTasksInLocaleStorageHandler() {\r\n    const tasks = yield select(selectTasks);\r\n    yield call(saveDataInLocaleStorage, tasks, \"tasks\");\r\n};\r\n\r\nexport function* tasksSaga() {\r\n    yield takeLatest(fetchExampleTasks.type, fetchExampleTasksHandler);\r\n    yield takeEvery(\"*\", saveTasksInLocaleStorageHandler);\r\n};","import { call, select, takeEvery } from \"redux-saga/effects\";\r\nimport { saveDataInLocaleStorage } from \"../dataFromLocaleStorage\";\r\nimport { toggleTheme, selectTheme } from \"./themeSlice\";\r\n\r\nfunction* saveThemeInLocaleStorageHandler() {\r\n    const theme = yield select(selectTheme)\r\n    yield call(saveDataInLocaleStorage, theme, \"theme\");\r\n};\r\n\r\nexport function* themeSaga() {\r\n    yield takeEvery(toggleTheme.type, saveThemeInLocaleStorageHandler);\r\n};","import { all } from \"redux-saga/effects\";\r\nimport { tasksSaga } from \"./tasks/tasksSaga\";\r\nimport { themeSaga } from \"./theme/themeSaga\";\r\n\r\nexport default function* rootSaga() {\r\n    yield all([\r\n        tasksSaga(),\r\n        themeSaga(),\r\n    ]);\r\n};","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport rootSaga from \"./features/rootSaga\";\r\nimport tasksReducer from \"./features/tasks/tasksSlice\";\r\nimport themeReducer from \"./features/theme/themeSlice\";\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nexport default configureStore({\r\n    reducer: {\r\n        tasks: tasksReducer,\r\n        theme: themeReducer,\r\n    },\r\n    middleware: [sagaMiddleware]\r\n});\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\";\nimport * as serviceWorker from './serviceWorker';\nimport App from './App';\nimport store from \"./store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}