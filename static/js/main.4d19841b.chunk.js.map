{"version":3,"sources":["Header/styled.js","Header/index.js","Form/styled.js","Form/index.js","Tasks/styled.js","Tasks/index.js","Buttons/styled.js","Buttons/index.js","Section/styled.js","Section/index.js","Container/styled.js","Container/index.js","GlobalStyle.js","theme.js","App.js","useHideDone.js","useTheme.js","useTasks.js","serviceWorker.js","index.js"],"names":["StyledHeader","styled","header","Button","button","theme","colors","sectionBackground","Header","title","toggleTheme","onClick","StyledForm","form","breakpoints","mobile","Input","input","frame","background","text","buttonInside","Form","addNewTask","useState","newTaskContent","setNewTaskContent","inputRef","useRef","onSubmit","event","preventDefault","trim","current","focus","ref","placeholder","value","onChange","target","required","List","ul","Item","li","hidden","css","Content","span","done","ckeck","remove","Tasks","tasks","hideDone","removeTask","toggleTaskDone","map","task","key","id","content","StyledButtons","div","StyledButton","disabled","Buttons","toggleHideDone","setAllDone","length","every","StyledSection","section","Title","h2","Body","Section","extraHeaderContent","body","StyledContainer","main","Container","children","GlobalStyle","createGlobalStyle","fonts","primaryFont","basicTheme","darkTheme","App","setHideDone","useHideDone","themeFromLocalStorage","localStorage","getItem","JSON","parse","setTheme","useEffect","setItem","stringify","useTheme","tasksFromLocalStorage","setTasks","filter","useTasks","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4d19841b.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const StyledHeader = styled.header`\r\n    display: grid;\r\n    grid-template-columns: 1fr auto;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    align-self: center;\r\n    padding: 10px;\r\n    border-radius: 5px;\r\n    border: none;\r\n    background: ${({theme}) => theme.colors.sectionBackground};\r\n    color: ${({theme}) => theme.colors.button};\r\n    transition: background 0.5s, transform 0.5s;\r\n\r\n    &:hover {\r\n        filter: brightness(110%);\r\n        transform: scale(1.05);\r\n    }\r\n    &:active {\r\n        filter: brightness(120%);\r\n        transform: scale(1.05);\r\n    }\r\n`;","import React from \"react\";\r\nimport { StyledHeader, Button } from \"./styled\";\r\n\r\n\r\nconst Header = ({ title, toggleTheme }) => (\r\n    <StyledHeader>\r\n        <h1>{title}</h1>\r\n        <Button onClick={() => toggleTheme()}>Zmień tło</Button>\r\n    </StyledHeader>\r\n);\r\n\r\nexport default Header;","import styled from \"styled-components\";\r\n\r\nexport const StyledForm = styled.form`\r\n    display: grid;\r\n    grid-template-columns: 1fr auto;\r\n    grid-gap: 10px;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoints.mobile}px) {\r\n        grid-template-columns: 1fr\r\n    }\r\n`;\r\n\r\nexport const Input = styled.input`\r\n    padding: 10px;\r\n    border: 1px solid ${({ theme }) => theme.colors.frame};\r\n    border-radius: 5px;\r\n    background-color: ${({ theme }) => theme.colors.background};\r\n    color: ${({ theme }) => theme.colors.text};\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    padding: 10px;\r\n    background-color: ${({ theme }) => theme.colors.button};\r\n    color: ${({ theme }) => theme.colors.buttonInside};\r\n    border: none;\r\n    border-radius: 5px;\r\n    transition: background 0.5s, transform 0.5s;\r\n\r\n    &:hover {\r\n        filter: brightness(110%);\r\n        transform: scale(1.05);\r\n    }\r\n    &:active {\r\n        filter: brightness(110%);\r\n        transform: scale(1.05);\r\n    }\r\n`;","import React, { useRef, useState } from \"react\";\r\nimport { StyledForm, Input, Button } from \"./styled\";\r\n\r\nconst Form = ({ addNewTask }) => {\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n    const inputRef = useRef(null);\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        addNewTask(newTaskContent.trim());\r\n        setNewTaskContent(\"\");\r\n        inputRef.current.focus();\r\n    };\r\n\r\n    return (\r\n        <StyledForm\r\n            onSubmit={onFormSubmit}\r\n        >\r\n            <Input\r\n                ref={inputRef}\r\n                placeholder=\"Co jest do zrobienia?\"\r\n                value={newTaskContent}\r\n                onChange={(event) => setNewTaskContent(event.target.value)}\r\n                required\r\n            />\r\n            <Button>Dodaj zadanie</Button>\r\n        </StyledForm>\r\n    )\r\n};\r\n\r\nexport default Form;","import styled, { css } from \"styled-components\";\r\n\r\nexport const List = styled.ul`\r\n    list-style-type: none;\r\n    padding: 0px;\r\n    margin: 0px;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n    padding: 10px;\r\n    display: grid;\r\n    grid-template-columns: auto 1fr auto;\r\n    grid-gap: 10px;\r\n    align-items: center;\r\n    border-bottom: 2px solid ${({theme}) => theme.colors.background};\r\n  \r\n    ${({ hidden }) => hidden && css`\r\n        display: none;\r\n    `}\r\n`;\r\n\r\nexport const Content = styled.span`\r\n    overflow-wrap: anywhere;\r\n\r\n    ${({ done }) => done && css`\r\n        overflow-wrap: anywhere;\r\n        text-decoration: line-through;\r\n    `}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    border: none;\r\n    color: ${({theme}) => theme.colors.buttonInside};\r\n    width: 30px;\r\n    height: 30px;\r\n\r\n    ${({ done }) => done && css`\r\n        background-color: ${({theme}) => theme.colors.ckeck};\r\n        transition: background 0.5s;\r\n\r\n    &:hover {\r\n        filter: brightness(110%);\r\n    }\r\n    &:active {\r\n        filter: brightness(120%);\r\n    }\r\n    `}\r\n\r\n    ${({ remove }) => remove && css`\r\n        background-color: ${({theme}) => theme.colors.remove};\r\n        transition: background 0.5s;\r\n\r\n    &:hover {\r\n        filter: brightness(150%);\r\n    }\r\n    &:active {\r\n        filter: brightness(120%);\r\n    }\r\n    `}\r\n`;","import React from \"react\";\r\nimport { List, Item, Content, Button } from \"./styled\";\r\n\r\nconst Tasks = ({ tasks, hideDone, removeTask, toggleTaskDone }) => (\r\n    <List>\r\n        {tasks.map((task) => (\r\n            <Item\r\n                hidden = {task.done && hideDone}\r\n                key={task.id}\r\n            >\r\n                <Button\r\n                    done\r\n                    onClick={() => toggleTaskDone(task.id)}\r\n                >\r\n                    {task.done ? \"✔\" : \"\"}\r\n                </Button>\r\n                <Content done={task.done}>\r\n                    {task.content}\r\n                </Content>\r\n                <Button\r\n                    remove\r\n                    onClick={() => removeTask(task.id)}\r\n                >\r\n                    {`✖`}\r\n                </Button>\r\n            </Item>\r\n        ))}\r\n    </List>\r\n)\r\n\r\nexport default Tasks;","import styled from \"styled-components\";\r\n\r\nexport const StyledButtons = styled.div`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n\r\n    @media (max-width: ${({theme}) => theme.breakpoints.mobile}px) {\r\n        flex-basis: 100%;\r\n    }\r\n`;\r\n\r\nexport const StyledButton = styled.button`\r\n    margin-left: 10px;\r\n    background: transparent;\r\n    border: none;\r\n    color: ${({theme}) => theme.colors.button};\r\n\r\n    @media (max-width: ${({theme}) => theme.breakpoints.mobile}px) {\r\n        flex-basis: 100%;\r\n        margin: 20px 0px 0px 0px;\r\n    }\r\n\r\n    &:hover {\r\n        filter: brightness(110%)\r\n    }\r\n    &:active {\r\n        filter: brightness(120%)\r\n    }\r\n    &:disabled {\r\n        color: ${({theme}) => theme.colors.disabled};\r\n    }\r\n`;","import React from \"react\";\r\nimport { StyledButtons, StyledButton } from \"./styled\";\r\n\r\nconst Buttons = ({ tasks, hideDone, toggleHideDone, setAllDone }) => (\r\n\r\n    <StyledButtons>\r\n        {tasks.length > 0 && (\r\n            <>\r\n                <StyledButton\r\n                    onClick={toggleHideDone}\r\n                >\r\n                    {hideDone ? \"Pokaż\" : \"Ukryj\"} ukończone\r\n                </StyledButton>\r\n                <StyledButton\r\n                    disabled={tasks.every((task) => task.done)}\r\n                    onClick={setAllDone}\r\n                >\r\n                    Ukończ wszystkie\r\n                </StyledButton>\r\n            </>\r\n        )}\r\n    </StyledButtons >\r\n\r\n);\r\n\r\nexport default Buttons;","import styled from \"styled-components\";\r\n\r\nexport const StyledSection = styled.section`\r\n    background-color: ${({theme}) => theme.colors.sectionBackground};\r\n    margin: 10px 0px;\r\n`;\r\n\r\nexport const Header = styled.header `\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    flex-wrap: wrap;\r\n    padding: 20px;\r\n    border-bottom: 3px solid ${({theme}) => theme.colors.background};\r\n`;\r\n\r\nexport const Title = styled.h2`\r\n    margin: 0px;\r\n    font-size: 20px;\r\n`;\r\n\r\nexport const Body = styled.div`\r\n    padding: 20px;\r\n`;","import React from \"react\";\r\nimport { StyledSection, Header, Title, Body } from \"./styled\";\r\n\r\nconst Section = ({ title, extraHeaderContent, body }) => (\r\n\r\n    <StyledSection>\r\n        <Header>\r\n            <Title>\r\n                {title}\r\n            </Title>\r\n            {extraHeaderContent}\r\n        </Header>\r\n        <Body>\r\n            {body}\r\n        </Body>\r\n    </StyledSection>\r\n);\r\n\r\nexport default Section;","import styled from \"styled-components\";\r\n\r\nexport const StyledContainer = styled.main`\r\n    max-width: 900px;\r\n    padding: 20px;\r\n    margin: 0 auto;\r\n`;","import React from \"react\";\r\nimport { StyledContainer } from \"./styled\";\r\n\r\nconst Container = ({ children }) => (\r\n    <StyledContainer>\r\n        {children}\r\n    </StyledContainer>\r\n);\r\n\r\nexport default Container;","import {createGlobalStyle} from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html {\r\n    box-sizing: border-box;\r\n    }\r\n\r\n    *, ::after, ::before {\r\n    box-sizing: inherit;\r\n    }\r\n\r\n    body {\r\n    font-family: ${({theme}) => theme.fonts.primaryFont};\r\n    background-color: ${({theme}) => theme.colors.background};\r\n    color: ${({theme}) => theme.colors.text};\r\n    }\r\n`;","\r\nexport const basicTheme = {\r\n    colors: {\r\n        background: \"#eee\",\r\n        sectionBackground: \"white\",\r\n        button: \"hsl(221, 79%, 55%)\",\r\n        disabled: \"gray\",\r\n        frame: \"#C9C9C9\",\r\n        text: \"black\",\r\n        ckeck: \"green\",\r\n        buttonInside: \"white\",\r\n        remove: \"#E81111\",\r\n    },\r\n    breakpoints: {\r\n        mobile: 540,\r\n    },\r\n    fonts: {\r\n        primaryFont: \"'Montserrat', sans-serif\",\r\n    },\r\n}\r\n\r\nexport const darkTheme = {\r\n    ...basicTheme,\r\n\r\n    colors: {\r\n        background: \"#23232A\",\r\n        sectionBackground: \"#333342\",\r\n        button: \"#10A278\",\r\n        disabled: \"black\",\r\n        frame: \"#333342\",\r\n        text: \"white\",\r\n        ckeck: \"green\",\r\n        buttonInside: \"white\",\r\n        remove: \"#E81111\",\r\n    },\r\n};\r\n","import React from 'react';\r\nimport Header from \"./Header\";\r\nimport Form from \"./Form\";\r\nimport Tasks from \"./Tasks\";\r\nimport Buttons from \"./Buttons\";\r\nimport Section from \"./Section\";\r\nimport Container from \"./Container\";\r\nimport { ThemeProvider } from \"styled-components\";\r\nimport { GlobalStyle } from \"./GlobalStyle\";\r\nimport { useTasks } from \"./useTasks\";\r\nimport { useTheme } from \"./useTheme\";\r\nimport {useHideDone} from \"./useHideDone\";\r\n\r\nfunction App() {\r\n\r\n  const [\r\n    hideDone,\r\n    toggleHideDone,\r\n  ] = useHideDone();\r\n\r\n  const [\r\n    theme,\r\n    toggleTheme,\r\n  ] = useTheme();\r\n\r\n  const [\r\n    tasks,\r\n    addNewTask,\r\n    setAllDone,\r\n    removeTask,\r\n    toggleTaskDone\r\n  ] = useTasks();\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <GlobalStyle />\r\n      <Container>\r\n        <Header\r\n          title=\"Lista zadań\"\r\n          toggleTheme={toggleTheme}\r\n        />\r\n        <Section\r\n          title=\"Dodaj nowe zadanie\"\r\n          body={<Form addNewTask={addNewTask} />}\r\n        />\r\n        <Section\r\n          title=\"Lista zadań\"\r\n          extraHeaderContent={\r\n            <Buttons\r\n              tasks={tasks}\r\n              hideDone={hideDone}\r\n              toggleHideDone={toggleHideDone}\r\n              setAllDone={setAllDone}\r\n            />\r\n          }\r\n          body={\r\n            <Tasks\r\n              tasks={tasks}\r\n              hideDone={hideDone}\r\n              removeTask={removeTask}\r\n              toggleTaskDone={toggleTaskDone}\r\n            />\r\n          }\r\n        />\r\n      </Container>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import {useState} from \"react\";\r\n\r\nexport const useHideDone = () => {\r\n    const [hideDone, setHideDone] = useState(false);\r\n\r\n    const toggleHideDone = () => {\r\n        setHideDone(hideDone => !hideDone);\r\n    };\r\n\r\n    return [\r\n        hideDone,\r\n        toggleHideDone,\r\n    ];\r\n};","import { useState, useEffect } from \"react\";\r\nimport { darkTheme, basicTheme } from \"./theme\";\r\n\r\nexport const useTheme = () => {\r\n    const getInitialTheme = () => {\r\n        const themeFromLocalStorage = localStorage.getItem(\"theme\");\r\n\r\n        return themeFromLocalStorage\r\n            ? JSON.parse(themeFromLocalStorage)\r\n            : basicTheme\r\n    };\r\n\r\n    const [theme, setTheme] = useState(getInitialTheme);\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(\"theme\", JSON.stringify(theme))\r\n    }, [theme])\r\n\r\n    const toggleTheme = () => {\r\n        setTheme(theme => theme === basicTheme ? darkTheme : basicTheme)\r\n    };\r\n\r\n    return [\r\n        theme,\r\n        toggleTheme,\r\n    ];\r\n}","import { useState, useEffect } from \"react\";\r\n\r\nexport const useTasks = () => {\r\n\r\n    const getInitialTasks = () => {\r\n        const tasksFromLocalStorage = localStorage.getItem(\"tasks\");\r\n\r\n        return tasksFromLocalStorage\r\n            ? JSON.parse(tasksFromLocalStorage)\r\n            : []\r\n    };\r\n\r\n    const [tasks, setTasks] = useState(getInitialTasks);\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(\"tasks\", JSON.stringify(tasks));\r\n    }, [tasks]);\r\n\r\n    const removeTask = (id) => {\r\n        setTasks(tasks => tasks.filter(task => task.id !== id));\r\n    };\r\n\r\n    const toggleTaskDone = (id) => {\r\n        setTasks(tasks => tasks.map(task => {\r\n            if (task.id === id) {\r\n                return {\r\n                    ...task,\r\n                    done: !task.done,\r\n                };\r\n            }\r\n            return task;\r\n        }));\r\n    };\r\n\r\n    const setAllDone = () => {\r\n        setTasks(tasks => tasks.map(task => ({\r\n            ...task,\r\n            done: true,\r\n        })));\r\n    };\r\n\r\n    const addNewTask = (newTaskContent) => {\r\n        setTasks(tasks => [\r\n            ...tasks,\r\n            {\r\n                id: tasks.length ? tasks[tasks.length - 1].id + 1 : 1,\r\n                content: newTaskContent,\r\n                done: false,\r\n            }\r\n        ]);\r\n    };\r\n\r\n    return [\r\n        tasks,\r\n        addNewTask,\r\n        setAllDone,\r\n        removeTask,\r\n        toggleTaskDone\r\n    ];\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n      <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}