{"version":3,"sources":["Header/index.js","Form/index.js","Tasks/index.js","Buttons/index.js","Section/index.js","Container/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","title","Form","className","placeholder","Tasks","tasks","hideDoneTasks","map","task","done","key","id","content","Buttons","length","disabled","every","Section","extraHeaderContent","body","Container","children","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uTAQeA,G,KANA,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACX,gCACI,4BAAKA,MCMEC,G,KAPF,kBACT,0BAAMC,UAAU,QACZ,2BAAOA,UAAU,cAAcC,YAAY,0BAC3C,4BAAQD,UAAU,gBAAlB,oBCkBOE,G,MArBD,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,cAAV,OAEV,wBAAIJ,UAAU,SACTG,EAAME,KAAI,SAACC,GAAD,OACP,wBAAIN,UAAS,0BAAqBM,EAAKC,MAAQH,EAAgB,0BAA4B,IACvFI,IAAKF,EAAKG,IAEV,4BAAQT,UAAU,qCACbM,EAAKC,KAAO,SAAM,IAEvB,0BAAMP,UAAS,UAAKM,EAAKC,KAAO,4BAA8B,wBACzDD,EAAKI,SAEV,4BAAQV,UAAU,uCAAlB,iBCMDW,G,MAnBC,SAAC,GAAD,IAAGR,EAAH,EAAGA,MAAOC,EAAV,EAAUA,cAAV,OAEZ,yBAAKJ,UAAU,WACVG,EAAMS,OAAS,GACZ,oCACI,4BAAQZ,UAAU,mBACbI,EAAgB,aAAU,QAD/B,mBAGA,4BAAQJ,UAAU,kBACda,SAAUV,EAAMW,OAAM,SAACR,GAAD,OAAUA,EAAKC,SADzC,6BCKDQ,G,MAbC,SAAC,GAAD,IAAGjB,EAAH,EAAGA,MAAOkB,EAAV,EAAUA,mBAAoBC,EAA9B,EAA8BA,KAA9B,OAEZ,6BAASjB,UAAU,WACf,4BAAQA,UAAU,mBACd,wBAAIA,UAAU,kBAAkBF,GAC/BkB,GAEL,yBAAKhB,UAAU,iBACViB,MCAEC,G,MARG,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OAEd,0BAAMnB,UAAU,aACXmB,KCEHhB,EAAQ,CACZ,CAAEM,GAAI,EAAGC,QAAS,wBAAoBH,MAAM,GAC5C,CAAEE,GAAI,EAAGC,QAAS,0BAAiBH,MAAM,IAoB5Ba,MAhBf,WACE,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAQtB,MAAM,qBACd,kBAAC,EAAD,CACEA,MAAM,qBAAqBmB,KAAM,kBAAC,EAAD,QAEnC,kBAAC,EAAD,CACEnB,MAAM,mBACNkB,mBAAoB,kBAAC,EAAD,CAASb,MAAOA,EAAOC,eAX7B,IAYda,KAAM,kBAAC,EAAD,CAAOd,MAAOA,EAAOC,eAZb,QCAFiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5a805ba4.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Header = ({ title }) => (\r\n    <header>\r\n        <h1>{title}</h1>\r\n    </header>\r\n);\r\n\r\nexport default Header;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Form = () => (\r\n    <form className=\"form\">\r\n        <input className=\"form__input\" placeholder=\"Co jest do zrobienia?\" />\r\n        <button className=\"form__button\">Dodaj zadanie</button>\r\n    </form>\r\n);\r\n\r\nexport default Form;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Tasks = ({ tasks, hideDoneTasks }) => (\r\n\r\n    <ul className=\"tasks\">\r\n        {tasks.map((task) => (\r\n            <li className={`tasks__listItem ${task.done && hideDoneTasks ? \"tasks__listItem--hidden\" : \"\"}`}\r\n                key={task.id}\r\n            >\r\n                <button className=\"tasks__button tasks__button--done\">\r\n                    {task.done ? \"✔\" : \"\"}\r\n                </button>\r\n                <span className={`${task.done ? \"tasks__listItemText--done\" : \"tasks__listItemText\"}`}>\r\n                    {task.content}\r\n                </span>\r\n                <button className=\"tasks__button tasks__button--remove\">\r\n                    {`✖`}\r\n                </button>\r\n            </li>\r\n        ))}\r\n    </ul>\r\n);\r\n\r\nexport default Tasks;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Buttons = ({ tasks, hideDoneTasks }) => (\r\n\r\n    <div className=\"buttons\">\r\n        {tasks.length > 0 && (\r\n            <>\r\n                <button className=\"buttons__button\">\r\n                    {hideDoneTasks ? \"Pokaż\" : \"Ukryj\"} ukończone\r\n                </button>\r\n                <button className=\"buttons__button\"\r\n                    disabled={tasks.every((task) => task.done)}\r\n                >\r\n                    Ukończ wszystkie\r\n                </button>\r\n            </>\r\n        )}\r\n    </div >\r\n\r\n);\r\n\r\nexport default Buttons;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Section = ({ title, extraHeaderContent, body }) => (\r\n\r\n    <section className=\"section\">\r\n        <header className=\"section__header\">\r\n            <h2 className=\"section__title\">{title}</h2>\r\n            {extraHeaderContent}\r\n        </header>\r\n        <div className=\"section__body\">\r\n            {body}\r\n        </div>\r\n    </section>\r\n);\r\n\r\nexport default Section;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Container = ({ children }) => (\r\n\r\n    <main className=\"container\">\r\n        {children}\r\n    </main>\r\n\r\n);\r\n\r\nexport default Container;","import React from 'react';\nimport Header from \"./Header\";\nimport Form from \"./Form\";\nimport Tasks from \"./Tasks\";\nimport Buttons from \"./Buttons\";\nimport Section from \"./Section\";\nimport Container from \"./Container\";\n\nconst tasks = [\n  { id: 1, content: \"przjeć na Reacta\", done: false },\n  { id: 2, content: \"zjeść kolacje\", done: true },\n];\nconst hideDoneTasks = false;\n\nfunction App() {\n  return (\n    <Container>\n      <Header title=\"Lista zadań\" />\n      <Section\n        title=\"Dodaj nowe zadanie\" body={<Form />}\n      />\n      <Section\n        title=\"Lista zadań\"\n        extraHeaderContent={<Buttons tasks={tasks} hideDoneTasks={hideDoneTasks} />}\n        body={<Tasks tasks={tasks} hideDoneTasks={hideDoneTasks} />}\n      />\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}