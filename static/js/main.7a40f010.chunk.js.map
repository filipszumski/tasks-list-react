{"version":3,"sources":["common/Header/styled.js","common/Header/index.js","features/tasks/tasksSlice.js","features/tasks/Form/styled.js","features/tasks/Form/index.js","features/tasks/TasksList/styled.js","features/tasks/TasksList/index.js","features/tasks/Buttons/styled.js","features/tasks/Buttons/index.js","common/Section/styled.js","common/Section/index.js","common/Container/styled.js","common/Container/index.js","GlobalStyle.js","theme.js","features/tasks/Tasks.js","useTheme.js","App.js","serviceWorker.js","store.js","index.js"],"names":["Wrapper","styled","header","Button","button","theme","colors","sectionBackground","Header","title","toggleTheme","onClick","tasksSlice","createSlice","name","initialState","tasks","hideDone","reducers","addNewTask","task","payload","push","setAllDone","done","toggleTaskDone","taskId","index","findIndex","id","removeTask","splice","toggleHideDone","state","actions","selectTasksState","selectTasks","selectHideDone","selectAreTasksEmpty","length","selectIsEveryTaskDone","every","StyledForm","form","breakpoints","mobile","Input","input","frame","background","text","buttonInside","Form","useState","newTaskContent","setNewTaskContent","inputRef","useRef","dispatch","useDispatch","onSubmit","event","preventDefault","content","nanoid","current","focus","ref","placeholder","value","onChange","target","required","List","ul","Item","li","hidden","css","Content","span","ckeck","remove","TasksList","useSelector","map","key","div","disabled","Buttons","areTasksEmpty","isEveryTaskDone","section","Title","h2","Body","Section","extraHeaderContent","body","main","Container","children","GlobalStyle","createGlobalStyle","fonts","primaryFont","basicTheme","darkTheme","Tasks","themeFromLocalStorage","localStorage","getItem","JSON","parse","setTheme","useEffect","setItem","stringify","useTheme","App","Boolean","window","location","hostname","match","configureStore","reducer","tasksReducer","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7a40f010.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.header`\r\n    display: grid;\r\n    grid-template-columns: 1fr auto;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    align-self: center;\r\n    padding: 10px;\r\n    border-radius: 5px;\r\n    border: none;\r\n    background: ${({theme}) => theme.colors.sectionBackground};\r\n    color: ${({theme}) => theme.colors.button};\r\n    transition: filter 0.5s, transform 0.5s;\r\n\r\n    &:hover {\r\n        filter: brightness(110%);\r\n        transform: scale(1.05);\r\n    }\r\n    &:active {\r\n        filter: brightness(120%);\r\n        transform: scale(1.05);\r\n    }\r\n`;","import React from \"react\";\r\nimport { Wrapper, Button } from \"./styled\";\r\n\r\n\r\nconst Header = ({ title, toggleTheme }) => (\r\n    <Wrapper>\r\n        <h1>{title}</h1>\r\n        <Button onClick={() => toggleTheme()}>Zmień tło</Button>\r\n    </Wrapper>\r\n);\r\n\r\nexport default Header;","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst tasksSlice = createSlice({\r\n    name: \"tasks\",\r\n    initialState: {\r\n        tasks: [],\r\n        hideDone: false,\r\n    },\r\n    reducers: {\r\n        addNewTask: ({ tasks }, { payload: task }) => {\r\n            tasks.push(task);\r\n        },\r\n        setAllDone: ({ tasks }) => {\r\n            for (const task of tasks) {\r\n                task.done = true;\r\n            };\r\n        },\r\n        toggleTaskDone: ({ tasks }, { payload: taskId }) => {\r\n            const index = tasks.findIndex(task => task.id === taskId);\r\n\r\n            tasks[index].done = !tasks[index].done;\r\n        },\r\n        removeTask: ({ tasks }, { payload: taskId }) => {\r\n            const index = tasks.findIndex(task => task.id === taskId)\r\n\r\n            tasks.splice(index, 1);\r\n        },\r\n        toggleHideDone: (state) => {\r\n            state.hideDone = !state.hideDone;\r\n        }\r\n    }\r\n});\r\n\r\nexport const {\r\n    addNewTask,\r\n    setAllDone,\r\n    toggleTaskDone,\r\n    removeTask,\r\n    toggleHideDone\r\n} = tasksSlice.actions;\r\n\r\nconst selectTasksState = state => state.tasks;\r\n\r\nexport const selectTasks = state => selectTasksState(state).tasks;\r\nexport const selectHideDone = state => selectTasksState(state).hideDone;\r\nexport const selectAreTasksEmpty = state => selectTasks(state).length === 0;\r\nexport const selectIsEveryTaskDone = state => selectTasks(state).every(task => task.done)\r\n\r\nexport default tasksSlice.reducer;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledForm = styled.form`\r\n    display: grid;\r\n    grid-template-columns: 1fr auto;\r\n    grid-gap: 10px;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoints.mobile}px) {\r\n        grid-template-columns: 1fr\r\n    }\r\n`;\r\n\r\nexport const Input = styled.input`\r\n    padding: 10px;\r\n    border: 1px solid ${({ theme }) => theme.colors.frame};\r\n    border-radius: 5px;\r\n    background-color: ${({ theme }) => theme.colors.background};\r\n    color: ${({ theme }) => theme.colors.text};\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    padding: 10px;\r\n    background-color: ${({ theme }) => theme.colors.button};\r\n    color: ${({ theme }) => theme.colors.buttonInside};\r\n    border: none;\r\n    border-radius: 5px;\r\n    transition: filter 0.5s, transform 0.5s;\r\n\r\n    &:hover {\r\n        filter: brightness(115%);\r\n        transform: scale(1.05);\r\n    }\r\n    &:active {\r\n        filter: brightness(130%);\r\n        transform: scale(1.05);\r\n    }\r\n`;","import React, { useRef, useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { nanoid } from \"@reduxjs/toolkit\";\r\nimport { addNewTask } from \"../tasksSlice\";\r\nimport { StyledForm, Input, Button } from \"./styled\";\r\n\r\nconst Form = () => {\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n    const inputRef = useRef(null);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        dispatch(addNewTask({\r\n            content: newTaskContent,\r\n            id: nanoid(),\r\n            done: false,\r\n        }));\r\n\r\n        setNewTaskContent(\"\");\r\n        inputRef.current.focus();\r\n    };\r\n\r\n    return (\r\n        <StyledForm\r\n            onSubmit={onFormSubmit}\r\n        >\r\n            <Input\r\n                ref={inputRef}\r\n                placeholder=\"Co jest do zrobienia?\"\r\n                value={newTaskContent}\r\n                onChange={(event) => setNewTaskContent(event.target.value)}\r\n                required\r\n            />\r\n            <Button>Dodaj zadanie</Button>\r\n        </StyledForm>\r\n    )\r\n};\r\n\r\nexport default Form;","import styled, { css } from \"styled-components\";\r\n\r\nexport const List = styled.ul`\r\n    list-style-type: none;\r\n    padding: 0px;\r\n    margin: 0px;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n    padding: 10px;\r\n    display: grid;\r\n    grid-template-columns: auto 1fr auto;\r\n    grid-gap: 10px;\r\n    align-items: center;\r\n    border-bottom: 2px solid ${({theme}) => theme.colors.background};\r\n  \r\n    ${({ hidden }) => hidden && css`\r\n        display: none;\r\n    `}\r\n`;\r\n\r\nexport const Content = styled.span`\r\n    overflow-wrap: anywhere;\r\n\r\n    ${({ done }) => done && css`\r\n        overflow-wrap: anywhere;\r\n        text-decoration: line-through;\r\n    `}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    border: none;\r\n    color: ${({theme}) => theme.colors.buttonInside};\r\n    width: 30px;\r\n    height: 30px;\r\n\r\n    ${({ done }) => done && css`\r\n        background-color: ${({theme}) => theme.colors.ckeck};\r\n        transition: filter 0.5s;\r\n\r\n    &:hover {\r\n        filter: brightness(115%);\r\n    }\r\n    &:active {\r\n        filter: brightness(130%);\r\n    }\r\n    `}\r\n\r\n    ${({ remove }) => remove && css`\r\n        background-color: ${({theme}) => theme.colors.remove};\r\n        transition: filter 0.5s;\r\n\r\n    &:hover {\r\n        filter: brightness(115%);\r\n    }\r\n    &:active {\r\n        filter: brightness(130%);\r\n    }\r\n    `}\r\n`;","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { removeTask, selectTasks, selectHideDone ,toggleTaskDone } from \"../tasksSlice\";\r\nimport { List, Item, Content, Button } from \"./styled\";\r\n\r\nconst TasksList = () => {\r\n    const tasks = useSelector(selectTasks);\r\n    const hideDone = useSelector(selectHideDone);\r\n    const dispatch = useDispatch();\r\n    \r\n    return (\r\n        <List>\r\n            {tasks.map((task) => (\r\n                <Item\r\n                    hidden={task.done && hideDone}\r\n                    key={task.id}\r\n                >\r\n                    <Button\r\n                        done\r\n                        onClick={() => dispatch(toggleTaskDone(task.id))}\r\n                    >\r\n                        {task.done ? \"✔\" : \"\"}\r\n                    </Button>\r\n                    <Content done={task.done}>\r\n                        {task.content}\r\n                    </Content>\r\n                    <Button\r\n                        remove\r\n                        onClick={() => dispatch(removeTask(task.id))}\r\n                    >\r\n                        {`✖`}\r\n                    </Button>\r\n                </Item>\r\n            ))}\r\n        </List>\r\n    );\r\n}\r\n\r\nexport default TasksList;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoints.mobile}px) {\r\n        flex-basis: 100%;\r\n    }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    margin-left: 10px;\r\n    background: transparent;\r\n    border: none;\r\n    color: ${({ theme }) => theme.colors.button};\r\n    transition: filter 0.3s;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoints.mobile}px) {\r\n        flex-basis: 100%;\r\n        margin: 20px 0px 0px 0px;\r\n    }\r\n\r\n    &:hover {\r\n        filter: brightness(115%)\r\n    }\r\n    &:active {\r\n        filter: brightness(130%)\r\n    }\r\n    &:disabled {\r\n        color: ${({ theme }) => theme.colors.disabled};\r\n    }\r\n`;","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { selectHideDone, selectAreTasksEmpty, selectIsEveryTaskDone } from \"../tasksSlice\";\r\nimport { Wrapper, Button } from \"./styled\";\r\nimport { toggleHideDone, setAllDone } from \"../tasksSlice\";\r\n\r\nconst Buttons = () => {\r\n    const dispatch = useDispatch();\r\n    const hideDone = useSelector(selectHideDone);\r\n    const areTasksEmpty = useSelector(selectAreTasksEmpty);\r\n    const isEveryTaskDone = useSelector(selectIsEveryTaskDone);\r\n\r\n    return (\r\n        <Wrapper>\r\n            {areTasksEmpty || (\r\n                <>\r\n                    <Button\r\n                        onClick={() => dispatch(toggleHideDone())}\r\n                    >\r\n                        {hideDone ? \"Pokaż\" : \"Ukryj\"} ukończone\r\n                    </Button>\r\n                    <Button\r\n                        disabled={isEveryTaskDone}\r\n                        onClick={() => dispatch(setAllDone())}\r\n                    >\r\n                        Ukończ wszystkie\r\n                    </Button>\r\n                </>\r\n            )}\r\n        </Wrapper >\r\n\r\n    )\r\n};\r\n\r\nexport default Buttons;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.section`\r\n    background-color: ${({theme}) => theme.colors.sectionBackground};\r\n    margin: 10px 0px;\r\n`;\r\n\r\nexport const Header = styled.header `\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    flex-wrap: wrap;\r\n    padding: 20px;\r\n    border-bottom: 3px solid ${({theme}) => theme.colors.background};\r\n`;\r\n\r\nexport const Title = styled.h2`\r\n    margin: 0px;\r\n    font-size: 20px;\r\n`;\r\n\r\nexport const Body = styled.div`\r\n    padding: 20px;\r\n`;","import React from \"react\";\r\nimport { Wrapper, Header, Title, Body } from \"./styled\";\r\n\r\nconst Section = ({ title, extraHeaderContent, body }) => (\r\n\r\n    <Wrapper>\r\n        <Header>\r\n            <Title>\r\n                {title}\r\n            </Title>\r\n            {extraHeaderContent}\r\n        </Header>\r\n        <Body>\r\n            {body}\r\n        </Body>\r\n    </Wrapper>\r\n);\r\n\r\nexport default Section;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.main`\r\n    max-width: 900px;\r\n    padding: 20px;\r\n    margin: 0 auto;\r\n`;","import React from \"react\";\r\nimport { Wrapper } from \"./styled\";\r\n\r\nconst Container = ({ children }) => (\r\n    <Wrapper>\r\n        {children}\r\n    </Wrapper>\r\n);\r\n\r\nexport default Container;","import {createGlobalStyle} from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html {\r\n    box-sizing: border-box;\r\n    }\r\n\r\n    *, ::after, ::before {\r\n    box-sizing: inherit;\r\n    }\r\n\r\n    body {\r\n    font-family: ${({theme}) => theme.fonts.primaryFont};\r\n    background-color: ${({theme}) => theme.colors.background};\r\n    color: ${({theme}) => theme.colors.text};\r\n    }\r\n`;","\r\nexport const basicTheme = {\r\n    colors: {\r\n        background: \"#eee\",\r\n        sectionBackground: \"white\",\r\n        button: \"hsl(221, 79%, 55%)\",\r\n        disabled: \"gray\",\r\n        frame: \"#C9C9C9\",\r\n        text: \"black\",\r\n        ckeck: \"green\",\r\n        buttonInside: \"white\",\r\n        remove: \"#E81111\",\r\n    },\r\n    breakpoints: {\r\n        mobile: 540,\r\n    },\r\n    fonts: {\r\n        primaryFont: \"'Montserrat', sans-serif\",\r\n    },\r\n}\r\n\r\nexport const darkTheme = {\r\n    ...basicTheme,\r\n\r\n    colors: {\r\n        background: \"#23232A\",\r\n        sectionBackground: \"#333342\",\r\n        button: \"#10A278\",\r\n        disabled: \"black\",\r\n        frame: \"#333342\",\r\n        text: \"white\",\r\n        ckeck: \"green\",\r\n        buttonInside: \"white\",\r\n        remove: \"#E81111\",\r\n    },\r\n};\r\n","import React from 'react';\r\nimport Header from \"../../common/Header\";\r\nimport Form from \"./Form\";\r\nimport TasksList from \"./TasksList\";\r\nimport Buttons from \"./Buttons\";\r\nimport Section from \"../../common/Section\";\r\nimport Container from \"../../common/Container\";\r\nimport { ThemeProvider } from \"styled-components\";\r\nimport { GlobalStyle } from \"../../GlobalStyle\";\r\nimport { useTheme } from \"../../useTheme\";\r\n\r\nfunction Tasks() {\r\n\r\n  const [\r\n    theme,\r\n    toggleTheme,\r\n  ] = useTheme();\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <GlobalStyle />\r\n      <Container>\r\n        <Header\r\n          title=\"Lista zadań\"\r\n          toggleTheme={toggleTheme}\r\n        />\r\n        <Section\r\n          title=\"Dodaj nowe zadanie\"\r\n          body={<Form />}\r\n        />\r\n        <Section\r\n          title=\"Lista zadań\"\r\n          extraHeaderContent={<Buttons />}\r\n          body={<TasksList />}\r\n        />\r\n      </Container>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default Tasks;\r\n","import { useState, useEffect } from \"react\";\r\nimport { darkTheme, basicTheme } from \"./theme\";\r\n\r\nexport const useTheme = () => {\r\n    const getInitialTheme = () => {\r\n        const themeFromLocalStorage = localStorage.getItem(\"theme\");\r\n\r\n        return themeFromLocalStorage\r\n            ? JSON.parse(themeFromLocalStorage)\r\n            : basicTheme\r\n    };\r\n\r\n    const [theme, setTheme] = useState(getInitialTheme);\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(\"theme\", JSON.stringify(theme))\r\n    }, [theme])\r\n\r\n    const toggleTheme = () => {\r\n        setTheme(theme => theme === basicTheme ? darkTheme : basicTheme)\r\n    };\r\n\r\n    return [\r\n        theme,\r\n        toggleTheme,\r\n    ];\r\n}","import React from \"react\";\r\nimport Tasks from \"./features/tasks/Tasks\";\r\n\r\nconst App = () => <Tasks />;\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport tasksReducer from \"./features/tasks/tasksSlice\";\r\n\r\nexport default configureStore({\r\n    reducer: {\r\n        tasks: tasksReducer,\r\n    },\r\n})\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\";\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from \"./store\";\n\nReactDOM.render(\n    <React.StrictMode>\n      <Provider store={store}>\n      <App />\n      </Provider>\n    </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}